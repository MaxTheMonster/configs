#+TITLE: My Emacs Configuration

* Ace window
#+BEGIN_SRC emacs-lisp
(use-package ace-window
  :ensure t
  :init
  (progn
    (global-set-key [remap other-window] 'ace-window)
    (custom-set-faces
     '(aw-leading-char-face
       ((t (:inherit ace-jump-face-foreground :height 3.0)))) 
    )))
#+END_SRC
* Auto-complete
  #+BEGIN_SRC emacs-lisp
    (use-package company
      :ensure t
      :diminish company-mode
      :bind (("C-c ." . company-complete)
             ("C-." . company-complete))
      :init
      (add-hook 'after-init-hook #'global-company-mode)
      (use-package company-quickhelp
        :ensure t
        :init (add-hook 'company-mode-hook #'company-quickhelp-mode)
        :config (setq company-quickhelp-delay 2))
      (use-package company-statistics
        :ensure t
        :init (add-hook 'after-init-hook #'company-statistics-mode))
      :config
      (setq company-selection-wrap-around t
            company-idle-delay 1.0
            company-minimum-prefix-length 3
            company-show-numbers t
            company-tooltip-align-annotations t
            company-search-regexp-function #'company-search-flex-regexp)
      (bind-keys :map company-active-map
                 ("C-n" . company-select-next)
                 ("C-p" . company-select-previous)
                 ("C-d" . company-show-doc-buffer)
                 ("C-l" . company-show-location)
                 ("<tab>" . company-complete)))
  #+END_SRC

* Counsel, Ivy and Swiper
#+BEGIN_SRC emacs-lisp
(use-package counsel
  :ensure t
  )
(use-package ivy
  :ensure t
  :diminish (ivy-mode)
  :bind (("C-x b" . ivy-switch-buffer))
  :config
  (ivy-mode 1)
  (setq ivy-use-virtual-buffers t)
  (setq ivy-display-style 'fancy))
(use-package swiper
  :ensure try
  :bind (("C-s" . swiper)
     ("C-r" . swiper)
     ("C-c C-r" . ivy-resume))
  :config
  (progn
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t)
    (setq ivy-display-style 'fancy)
    (define-key read-expression-map (kbd "C-r") 'counsel-expression-history)
    ))
#+END_SRC
* Dumb Jump
  #+BEGIN_SRC emacs-lisp
     (use-package dumb-jump
      :bind (("M-g o" . dumb-jump-go-other-window)
             ("M-g j" . dumb-jump-go)
             ("M-g x" . dumb-jump-go-prefer-external)
             ("M-g z" . dumb-jump-go-prefer-external-other-window))
      :config 
      ;; (setq dumb-jump-selector 'ivy) ;; (setq dumb-jump-selector 'helm)
    :init
    (dumb-jump-mode)
      :ensure
    )
  #+END_SRC
* Elfeed
#+BEGIN_SRC emacs-lisp
  (use-package elfeed
    :ensure t
    :bind ("C-x w" . elfeed)
    :init (setq elfeed-feeds
                '(;; News
                  ("http://digg.com/rss/top.rss" news)
                  )
          )
    )

#+END_SRC
* Environment Variables
#+BEGIN_SRC emacs-lisp
  (use-package exec-path-from-shell
    :ensure t
    :init (exec-path-from-shell-copy-env "GOPATH")
    (exec-path-from-shell-copy-env "PATH"))
#+END_SRC
* Eshell
#+BEGIN_SRC emacs-lisp
  (defun eshell-throwaway ()
    (interactive)
    (eshell (cdr (cdr (cdr (current-time))))))

  (defun martin-eshell ()
    (interactive)
    (if (projectile-project-p)
        (projectile-run-eshell)
      (eshell)))

  (global-set-key (kbd "C-x m") #'martin-eshell)
  (global-set-key (kbd "C-x M-m") #'eshell-throwaway)

  (defun eshell/vim (filename &optional wildcards)
    (if wildcards
        (find-file filename wildcards)
      (find-file filename)))

  (defun eshell/emacs (filename &optional wildcards)
    (if wildcards
        (find-file filename wildcards)
      (find-file filename)))

  (add-hook 'eshell-mode-hook (lambda () (company-mode -1)))

#+END_SRC
* Evil-mode
  #+BEGIN_SRC emacs-lisp
(use-package evil
  :ensure t
  :disabled t
  :config (evil-mode 1))
  #+END_SRC
  
* Fonts
#+BEGIN_SRC emacs-lisp
  (when (window-system)
    (set-default-font "Iosevka"))
#+END_SRC
* Functions
#+BEGIN_SRC emacs-lisp
  ;; (defun my/open-project-todo (&optional arg)
  ;;   "Open project's TODO file in org/ directory."
  ;;   (interactive "P")
  ;;   (projectile-completing-read
  ;;     "Open project TODO: ", )
  ;; )
#+END_SRC
* Games
  #+BEGIN_SRC emacs-lisp
    (use-package gnugo
      :ensure t)

    (use-package typing
      :ensure t)

    (use-package chess
      :ensure t)

  #+END_SRC
* Indentation
  #+BEGIN_SRC emacs-lisp
    (setq-default indent-tabs-mode nil)  
    (setq indent-tabs-mode nil) 
  #+END_SRC
* Interface tweaks
#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-message t)
  (setq frame-title-format '("GNU Emacs " emacs-version))
  (tool-bar-mode -1)
  (fset 'yes-or-no-p 'y-or-n-p)
  (global-set-key (kbd "<f5>") 'revert-buffer)
#+END_SRC
  
* Keybindings
#+BEGIN_SRC emacs-lisp
  (bind-key "C-x t" 'sort-lines)
  (bind-key "C-x n" (lambda() (interactive) (projectile-find-file-in-directory "/home/max/workspace/org/programming/projects/")))
  (bind-key "C-c r" 'mu4e)
  (bind-key "C-c c" 'mu4e-compose-new)
#+END_SRC
* Line numbers
  #+BEGIN_SRC emacs-lisp
    (use-package nlinum-relative
      :ensure t
      :init
      (setq nlinum-relative-redisplay-delay 0) 
      :config
      (add-hook 'prog-mode-hook 'nlinum-relative-mode))
  #+END_SRC
* Highlighting Lines
  #+BEGIN_SRC emacs-lisp
    (global-hl-line-mode)
  #+END_SRC
* Mail
  #+BEGIN_SRC emacs-lisp
    (require 'mu4e)

    (setq mu4e-maildir-shortcuts
          '(("/INBOX"             . ?i)))
    (setq mu4e-maildir "~/mail")
    (add-to-list 'load-path "/usr/share/emacs/site-lisp/mu4e")
    (setq mu4e-get-mail-command "offlineimap")

    (setq user-full-name "Max Ungless")
    (setq user-mail-address "max@maxungless.com")

    (require 'smtpmail)
    (require 'starttls)
    (setq send-mail-function 'smtpmail-send-it
          message-send-mail-function 'smtpmail-send-it
          smtpmail-starttls-credentials '(("smtp.webfaction.com" 587 nil nil))
          smtpmail-auth-credentials (expand-file-name "~/.authinfo")
          smtpmail-default-smtp-server "smtp.webfaction.com"
          smtpmail-smtp-server "smtp.webfaction.com"
          smtpmail-smtp-service 587
          smtpmail-debug-info t)
  #+END_SRC
* Magit
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t
    :bind ("C-c s" . magit-status))
#+END_SRC
* Mode line
** Telephone Line
   #+BEGIN_SRC emacs-lisp
     (setq telephone-line-primary-left-separator 'telephone-line-identity-left
         telephone-line-secondary-left-separator 'telephone-line-identity-hollow-left
         telephone-line-primary-right-separator 'telephone-line-identity-right
         telephone-line-secondary-right-separator 'telephone-line-identity-hollow-right)
     (setq telephone-line-height 24
         telephone-line-evil-use-short-tag t)
     (use-package telephone-line
       :ensure t
       :init (telephone-line-mode 1))
    #+END_SRC
** Content
   #+BEGIN_SRC emacs-lisp
   #+END_SRC
* Multiple Cursors
  #+BEGIN_SRC emacs-lisp
    (use-package multiple-cursors
      :ensure t
      :bind ( "C-S-c C-S-c" . mc/edit-lines))
  #+END_SRC
* Music
  #+BEGIN_SRC emacs-lisp
    (use-package bongo
      :ensure t
      :bind ("C-c b" . bongo))
  #+END_SRC
* Nyan Mode
  #+BEGIN_SRC emacs-lisp
    (use-package nyan-mode
      :ensure t
      :config (nyan-mode))
  #+END_SRC
* Org Mode
** Packages
  #+BEGIN_SRC emacs-lisp
    (use-package org-bullets
      :ensure t
      :config
      (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
  #+END_SRC
** Configurations
   #+BEGIN_SRC emacs-lisp
     (setq org-directory "~/workspace/org/")
     (setq org-default-notes-file "~/workspace/org/programming/notes.org")
     (setq org-export-html-postamble-format 
           '(("en" "<p class=\"date\">Date: %d</p>")))
     (setq org-export-html-date-format-string "%A %d %B %Y")
   #+END_SRC
** Keybindings
   #+BEGIN_SRC emacs-lisp
     (bind-key "C-c p" 'org-capture)
     (bind-key "C-c a" 'org-agenda)
     (global-set-key (kbd "C-c o") 
                     (lambda () (interactive) (find-file org-default-notes-file)))
   #+END_SRC

* Parentheses
  #+BEGIN_SRC emacs-lisp
    (use-package rainbow-delimiters
      :ensure t
      :init
      (add-hook 'prog-mode-hook 'rainbow-delimiters-mode)
      :config
      (set-face-attribute 'rainbow-delimiters-unmatched-face nil
                          :foreground 'unspecified
                          :inherit 'error))
    (use-package smartparens
      :ensure t
      :config (smartparens-global-mode))
  #+END_SRC
* Programming tools
** Python
    #+BEGIN_SRC emacs-lisp
      (use-package elpy
        :disabled t
        :ensure t
        :init (elpy-enable))

      (use-package company-jedi
        :ensure t
        :disabled t
        :init
        (add-hook 'python-mode-hook 'jedi:setup))
    #+END_SRC
** Go
    #+BEGIN_SRC emacs-lisp
      (use-package go-mode
        :ensure t
        :config (add-hook 'before-save-hook 'gofmt-before-save))

      (use-package go-errcheck
        :ensure t)

      (use-package go-eldoc
        :ensure t
        :config (add-hook 'go-mode-hook 'go-eldoc-setup))
    #+END_SRC
** Markdown
    #+BEGIN_SRC emacs-lisp
      (use-package markdown-mode
        :ensure t)
    #+END_SRC
** CoffeeScript
    #+BEGIN_SRC emacs-lisp
      (use-package coffee-mode
        :ensure t)
    #+END_SRC
** Web
   #+BEGIN_SRC emacs-lisp
          (use-package web-mode
            :ensure t
            :config (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
            (setq web-mode-engines-alist
                  '(("django"    . "\\.html\\'")))
            (setq web-mode-enable-auto-closing t))

          (use-package emmet-mode
            :ensure t
            :bind ("C-<tab>" . emmet-expand-yas))
   #+END_SRC
* Projectile
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :ensure t
    :init (projectile-mode))
#+END_SRC
* Rainbow mode
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-mode
    :ensure t)
#+END_SRC
* Smooth scrolling
  #+BEGIN_SRC emacs-lisp
 (setq redisplay-dont-pause t
  scroll-margin 1
  scroll-step 1
  scroll-conservatively 10000
  scroll-preserve-screen-position 1)
  #+END_SRC
  
* Snippets
  #+BEGIN_SRC emacs-lisp
    (use-package yasnippet
      :ensure t
      :init (yas-global-mode 1))
  #+END_SRC
* Stack overflow
  #+BEGIN_SRC emacs-lisp
    (use-package sx
      :ensure t)  
  #+END_SRC
* Sudo Editing
#+BEGIN_SRC emacs-lisp
  (use-package sudo-edit
    :ensure t)
#+END_SRC
* Syntax checking
  #+BEGIN_SRC emacs-lisp
 (use-package flycheck
  :ensure t
  :init
  (global-flycheck-mode t))
  #+END_SRC
* Themes
  #+BEGIN_SRC emacs-lisp
    (use-package color-theme
     :ensure t)

    (use-package white-sand-theme
      :disabled t
      :ensure t
      :config (load-theme 'white-sand t))

    (use-package twilight-bright-theme
      :disabled t
      :ensure t
      :config (load-theme 'twilight-bright t))

    (use-package planet-theme
      :ensure t
      :disabled t
      :config (load-theme 'planet t))

    (use-package molokai-theme
      :ensure t
      :config (load-theme 'molokai t))
  #+END_SRC
* Try
#+BEGIN_SRC emacs-lisp 
(use-package try
    :ensure t)
#+END_SRC
* Wakatime
  #+BEGIN_SRC emacs-lisp
    (use-package wakatime-mode
      :ensure t
      :init (global-wakatime-mode))
  #+END_SRC
* Which key
#+BEGIN_SRC emacs-lisp
(use-package which-key
    :ensure t 
    :config
    (which-key-mode))
#+END_SRC
* Writing
  #+BEGIN_SRC emacs-lisp
    (use-package writeroom-mode
      :ensure t
      :init
      (flyspell-mode))
  #+END_SRC
